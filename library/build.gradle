apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile 'com.github.just-4-fun:kotlinkit:1.0-SNAPSHOT'
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testCompile 'junit:junit:4.12'
}

kotlin { experimental { coroutines 'enable' } }


/* PUBLISHING LOCAL: task: publish..Local */

apply plugin: 'maven-publish'

//publishing {
//    publications {
//        mavenProject(MavenPublication) {
//            groupId 'com.github.just-4-fun'
//            artifactId 'modularity'
//            version '0.1'
//            artifact(sourcesJar)
//            artifact("$buildDir/outputs/aar/library-release.aar")
//        }
//    }
//}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

/* PUBLISH TO JCENTER */

apply plugin: 'com.jfrog.bintray'

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['theProject']
//    publish = true//[Default: false] true Whether version should be auto published after an upload
//    override = true //[Default: false] Whether to override version artifacts already published
//    dryRun = true //[Default: false] Whether to run this as dry-run, without deploying
    pkg {
        repo = 'public'
        name = 'modularity'
        userOrg = 'just-4-fun'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/just-4-fun/modularity.git'
        websiteUrl = 'https://github.com/just-4-fun/modularity'
        githubRepo = 'modularity'
        version { name = project.version }
//        labels = ['gear', 'gore', 'gorilla']
//        publicDownloadNumbers = true
        githubRepo = 'just-4-fun/modularity' //Optional Github repository
        githubReleaseNotesFile = 'README.md' //Optional Github readme file
    }
}

// Maven pom configuration:
//def pomConfig = {
//    packaging 'aar'
//    name 'modularity'
//    description 'Application organization framework'
//    url 'https://github.com/just-4-fun/modularity'
//    scm {
//        connection 'scm:git:git://github.com/just-4-fun/modularity.git'
//        developerConnection 'scm:git:ssh://github.com/just-4-fun/modularity.git'
//        url 'https://github.com/just-4-fun/modularity/tree/master'
//    }
//    licenses {
//        license {
//            name 'The Apache License, Version 2.0'
//            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//        }
//    }
//    developers {
//        developer {
//            name 'Markus.M'
//            email 'markus.marvell@gmail.com'
//            organization 'just4fun'
//            organizationUrl 'https://github.com/just-4-fun'
//        }
//    }
//}

publishing {
    publications {
        theProject(MavenPublication) {
            artifact(sourcesJar)
            artifact("$buildDir/outputs/aar/library-release.aar")
            groupId 'com.github.just-4-fun'
            artifactId 'modularity'
            version '0.1'
//            pom.withXml {
//                def root = asNode()
//                root.children().last() + pomConfig
////                def dependenciesNode = asNode().appendNode('dependencies')
////                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
////                configurations.compile.allDependencies.each {
////                    if(it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null)
////                    {
////                        def dependencyNode = dependenciesNode.appendNode('dependency')
////                        dependencyNode.appendNode('groupId', it.group)
////                        dependencyNode.appendNode('artifactId', it.name)
////                        dependencyNode.appendNode('version', it.version)
////                    }
////                }
//            }
        }
    }
}